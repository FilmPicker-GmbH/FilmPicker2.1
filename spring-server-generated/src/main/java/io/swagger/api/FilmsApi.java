/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.62).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Film;
import io.swagger.model.InlineResponse200;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-08-31T15:00:15.128234763Z[GMT]")
@Validated
public interface FilmsApi {

    @Operation(summary = "Add a film by ID", description = "", security = {
        @SecurityRequirement(name = "OAuthClientCredentials", scopes = {
            "films"        })    }, tags={ "Film" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The film details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Film.class))),
        
        @ApiResponse(responseCode = "404", description = "A not found error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "4XX", description = "A client error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "200", description = "An unexpected error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @PostMapping(value = "/films/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" })
    ResponseEntity<Film> addFilm(@Parameter(in = ParameterIn.PATH, description = "The film ID", required=true, schema=@Schema(description = "Add film by ID")) @PathVariable String id
, @Parameter(in = ParameterIn.DEFAULT, description = "The film details", required=true, schema=@Schema(description = "Add film by ID")) @Valid @RequestBody Film body
);


    @Operation(summary = "Delete a film by ID", description = "", security = {
        @SecurityRequirement(name = "OAuthClientCredentials", scopes = {
            "films"        })    }, tags={ "Film" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "The film was deleted"),
        
        @ApiResponse(responseCode = "404", description = "A not found error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "4XX", description = "A client error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "200", description = "An unexpected error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @DeleteMapping(value = "/films/{id}",
        produces = { "application/json" })
    ResponseEntity<Void> deleteFilm(@Parameter(in = ParameterIn.PATH, description = "The film ID", required=true, schema=@Schema(description = "Schema description for delete" )) @PathVariable String id
);


    @Operation(summary = "Get a film by ID", description = "", security = {
        @SecurityRequirement(name = "OAuthClientCredentials", scopes = {
            "films"        })    }, tags={ "Film" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The film details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Film.class))),
        
        @ApiResponse(responseCode = "404", description = "A not found error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "4XX", description = "A client error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "200", description = "An unexpected error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @GetMapping(value = "/films/{id}",
        produces = { "application/json" })
    ResponseEntity<Film> getFilm(@Parameter(in = ParameterIn.PATH, description = "The film ID", required=true, schema=@Schema(description = "Schema description for getFilm" )) @PathVariable String id
);


    @Operation(summary = "Get all films", description = "", security = {
        @SecurityRequirement(name = "OAuthClientCredentials", scopes = {
            "films"        })    }, tags={ "Films" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The paginated list of films", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "4XX", description = "A client error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "200", description = "An unexpected error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @GetMapping(value = "/films",
        produces = { "application/json" })
    ResponseEntity<InlineResponse200> getFilms(@Parameter(in = ParameterIn.QUERY, description = "The page offset" ,schema=@Schema( defaultValue="0")) @Valid @RequestParam(required = false, defaultValue="0") Integer offset
, @Parameter(in = ParameterIn.QUERY, description = "The page limit" ,schema=@Schema( defaultValue="5")) @Valid @RequestParam(required = false, defaultValue="5") Integer limit
);


    @Operation(summary = "Update a film by ID", description = "", security = {
        @SecurityRequirement(name = "OAuthClientCredentials", scopes = {
            "films"        })    }, tags={ "Film" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The film details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Film.class))),
        
        @ApiResponse(responseCode = "404", description = "A not found error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "4XX", description = "A client error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))),
        
        @ApiResponse(responseCode = "200", description = "An unexpected error response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @PutMapping(value = "/films/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" })
    ResponseEntity<Film> updateFilm(@Parameter(in = ParameterIn.PATH, description = "The film ID", required=true, schema=@Schema(description = "Schema description for update film" )) @PathVariable String id
, @Parameter(in = ParameterIn.DEFAULT, description = "The film details", required=true, schema=@Schema(description = "Schema description for film" )) @Valid @RequestBody Film body
);

}

